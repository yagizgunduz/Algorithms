int max(int a, int b) { return (a > b) ? a : b; }



int ksdp(int** ks,int**& market, int n1, int n2, vector<int>& solution){

    int* mysol = new int[n1];
    for(int i=0; i<n1; i++){
        for(int j=0; j<n2; j++){
            if(i > j){
                
                continue;
            }
            if(i == 0){
                if(j == 0){
                    ks[i][j] = market[i][j];
                }
                else{
                    ks[i][j] = max(market[i][j], ks[i][j-1]);
                }
            }
            else if(i == j){
                ks[i][j] = market[i][j] + ks[i-1][j-1];

            }
            else{
                ks[i][j] = max(market[i][j] + ks[i-1][j-1], ks[i][j-1]);
            }
        }
    }
    int j = n2-1;
    for(int i=n1-1; i>=0 ; i--){
        if(i == 0){
            if(j == 0){
                solution.insert(solution.begin(),j);
            }
        else{
            if(ks[i][j] == ks[i][j-1]){
                j--;
                i++;
            }
            else{
                solution.insert(solution.begin(),j);
                break;
            }
        }
      }
      else{
        if(ks[i][j] - market[i][j] == ks[i-1][j-1]){
          solution.insert(solution.begin(),j);
          j--;
        }
        else{
          j--;
          i++;
        }
      }
    }

    return ks[n1-1][n2-1];
}


int BuyStocks (int**& market, int n1, int n2, vector<int>& solution)
{
    int **ks = new int*[n1];
    for(int i = 0; i < n1; i++){
        ks[i] = new int[n2];
    }
    return ksdp(ks, market, n1, n2, solution);

}
